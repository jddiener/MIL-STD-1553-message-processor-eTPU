// Remote Terminal test
//
// Test processing of BC->RT messages

#define CONFIG_RT
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

S32 i;
for (i = 0; i < 2; i++)
{
    if (i == 0) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0);
    if (i == 1) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0xff);

// set initial RT address
write_chan_data24 ( RX_A, _CPBA24_MS1553__terminalAddress_, (4 << 11));


//------------------------------------------------------------------------------
// @@L1 Remote Terminal (RT) BC-RT Functional Tests (Receive)
//------------------------------------------------------------------------------

//--------------------------------------------------------
// @@L2 Test: BC to RT 'Receive' Transfer, matching terminal address
// @@I 0x40000100

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
wait_time(10);

// @@d  Test a message from the controller to the Receiver RT
// @@d  at address '4' with three data words.

IDLE
// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=0    (0<<10)
// LOC=0x11 (0x11<<5)
// CNT=3    (3<<0)
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x3   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0

//IDLE
// Terminal4.status
// RT=4    (4<<11)
// Err=0   (0<<0)
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_1
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2000 );
RESPONSE_WORD_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


// test another BC-RT message addressed for this RT

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=0    (0<<10)
// LOC=0x13 (0x13<<5)
// CNT=5    (5<<0)
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x6 HEX_0x5   PARITY_1
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0xB HEX_0xD HEX_0x2 HEX_0xE   PARITY_1
DATA_SYNCH    HEX_0x3 HEX_0x9 HEX_0xF HEX_0x8   PARITY_0
DATA_SYNCH    HEX_0x2 HEX_0x1 HEX_0xA HEX_0x5   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0

//IDLE
// Terminal4.status
// RT=4    (4<<11)
// Err=7   (7<<0)
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x7   PARITY_1
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2007 );
RESPONSE_WORD_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2265 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 5 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xbd2e);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x39f8);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x21a5);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x64f9);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2265 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2007 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0xbd2e);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x39f8);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x21a5);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x0c, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x10, 0xffff, 0x64f9);

// test another BC-RT message addressed for this RT (1 data word)

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=0    (0<<10)
// LOC=0x13 (0x13<<5)
// CNT=1    (1<<0)
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x6 HEX_0x1   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1

//IDLE
// Terminal4.status
// RT=4    (4<<11)
// Err=7   (7<<0)
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x7   PARITY_1
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2007 );
RESPONSE_WORD_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2261 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x5663);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2261 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2007 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x5663);


// now inject two messages not addressed to this RT

//--------------------------------------------------------
// @@L2 Test: BC to RT 'Receive' Transfer, non-matching terminal address
// @@I 0x40000110

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command(Terminal4)
// RT=8     (8<<11)
// R/T=0    (0<<10)
// LOC=0x13 (0x13<<5)
// CNT=1    (1<<0)
CMD_SYNCH    HEX_0x4 HEX_0x2 HEX_0x6 HEX_0x1   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x3 HEX_0xC HEX_0x9 HEX_0x5   PARITY_1

IDLE
// Terminal4.status
// RT=8    (8<<11)
// Err=0   (0<<0)
CMD_SYNCH    HEX_0x4 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x4261 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x4000 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x3c95 );


IDLE
// Master.Command(Terminal4)
// RT=3     (3<<11)
// R/T=0    (0<<10)
// LOC=0x11 (0x11<<5)
// CNT=2    (2<<0)
CMD_SYNCH    HEX_0x1 HEX_0xA HEX_0x2 HEX_0x2   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0
DATA_SYNCH    HEX_0x3 HEX_0xC HEX_0x9 HEX_0x5   PARITY_1

IDLE
// Terminal4.status
// RT=3    (3<<11)
// Err=0   (0<<0)
CMD_SYNCH    HEX_0x1 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, INVALID_WORD);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x1a22 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x64f9 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x3c95 );


// last, back to a valid message for this RT (change RT address!)
write_chan_data24 ( RX_A, _CPBA24_MS1553__terminalAddress_, (3 << 11));

IDLE
// Master.Command(Terminal4)
// RT=3     (3<<11)
// R/T=0    (0<<10)
// LOC=0x11 (0x11<<5)
// CNT=2    (2<<0)
CMD_SYNCH    HEX_0x1 HEX_0xA HEX_0x2 HEX_0x2   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0
DATA_SYNCH    HEX_0x3 HEX_0xC HEX_0x9 HEX_0x5   PARITY_1

//IDLE
// Terminal4.status
// RT=3    (3<<11)
// Err=0   (0<<0)
//CMD_SYNCH    HEX_0x1 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_1
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x1800 );
RESPONSE_WORD_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x1A22 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 2 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x64f9);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x3c95);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x1a22 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x64f9 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x3c95 );


//--------------------------------------------------------

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

//--------------------------------------------------------
// @@L2 Test: BC to RT 'Receive' Transfer, broadcast, 2 data words
// @@I 0x40000120

// Master.Command(Terminal31)
// RT=31    (31<<11)
// R/T=0    (0<<10)
// LOC=0x11 (0x11<<5)
// CNT=2    (2<<0)
CMD_SYNCH    HEX_0xF HEX_0xA HEX_0x2 HEX_0x2   PARITY_1
// Terminal data  (2X)
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0
DATA_SYNCH    HEX_0x3 HEX_0xC HEX_0x9 HEX_0x5   PARITY_1

// no status response to a broadcast

INVALID_LONG_IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0xFA22 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 2 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x64f9);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x3c95);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_BROADCAST_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xfa22 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x64f9 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x3c95 );


//--------------------------------------------------------
// @@L2 Test: BC to RT 'Receive' Transfer, broadcast, 1 data word
// @@I 0x40000130

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// test broadcast BC->RT

// Master.Command(Terminal31)
// RT=31    (31<<11)
// R/T=0    (0<<10)
// LOC=0x11 (0x11<<5)
// CNT=1    (1<<0)
CMD_SYNCH    HEX_0xF HEX_0xA HEX_0x2 HEX_0x1   PARITY_1
// Terminal data  (1X)
DATA_SYNCH    HEX_0x3 HEX_0xC HEX_0x9 HEX_0x5   PARITY_1

// no status response to a broadcast

INVALID_LONG_IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0xFA21 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x3c95);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_BROADCAST_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xfa21 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x3c95 );

} // for loop


//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_RT_RX.c", "RT_etpu_test\\RT_BcToRt_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_RT_TX.c", "RT_etpu_test\\RT_BcToRt_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
