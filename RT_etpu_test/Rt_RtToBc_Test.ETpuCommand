// Remote Terminal test
//
// Test processing of RT->BC messages

#define CONFIG_RT
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

//------------------------------------------------------------------------------
// @@L1 Remote Terminal (RT) RT-BC Functional Tests (Transmit)
//------------------------------------------------------------------------------

//--------------------------------------------------------
// @@L2 Test: RT to BC 'Transmit' Transfer, matching terminal address
// @@I 0x40000200

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
wait_time(10);

// @@d  Test a transmit message from specified RT to the BC
// @@d  at address '4' with three data words.

IDLE
// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=0    (1<<10)
// LOC=0x11 (0x11<<5)
// CNT=3    (3<<0)
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x3   PARITY_1

write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2000 );
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x00, 0x815f);
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x04, 0x5663);
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x08, 0x64f9);
RESPONSE_WORD_1
RESPONSE_WORD_X
RESPONSE_WORD_X
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2623 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_BC_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2623 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);

// @@d  Test a transmit message from specified RT to the BC
// @@d  at address '4' with one data word.

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=0    (1<<10)
// LOC=0x13 (0x13<<5)
// CNT=1    (1<<0)
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x6 HEX_0x1   PARITY_1

write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2007 );
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x00, 0xbd2e);
RESPONSE_WORD_1
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2661 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_BC_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2661 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2007 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0xbd2e);



// now inject two transmit messages not addressed to this RT

//--------------------------------------------------------
// @@L2 Test: RT to BC 'Transmit' Transfer, non-matching terminal address
// @@I 0x40000210

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command(Terminal4)
// RT=8     (8<<11)
// R/T=1    (1<<10)
// LOC=0x13 (0x13<<5)
// CNT=1    (1<<0)
CMD_SYNCH    HEX_0x4 HEX_0x6 HEX_0x6 HEX_0x1   PARITY_1

IDLE

// Terminal4.status
// RT=8    (8<<11)
// Err=0   (0<<0)
CMD_SYNCH    HEX_0x4 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x3 HEX_0xC HEX_0x9 HEX_0x5   PARITY_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_BC_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x4661 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x4000 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x3c95);


IDLE

// Master.Command(Terminal4)
// RT=3     (3<<11)
// R/T=1    (1<<10)
// LOC=0x11 (0x11<<5)
// CNT=2    (2<<0)
CMD_SYNCH    HEX_0x1 HEX_0xE HEX_0x2 HEX_0x2   PARITY_1

IDLE

// Terminal4.status
// RT=3    (3<<11)
// Err=0   (0<<0)
CMD_SYNCH    HEX_0x1 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_1
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0
DATA_SYNCH    HEX_0x3 HEX_0xC HEX_0x9 HEX_0x5   PARITY_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_BC_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x1e22 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x64f9);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x3c95);


// last, back to a valid message for this RT (change RT address!)
write_chan_data24 ( RX_A, _CPBA24_MS1553__terminalAddress_, (3 << 11));
// enable message status interrupts
write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0xff);

IDLE
// Master.Command(Terminal4)
// RT=3     (3<<11)
// R/T=1    (1<<10)
// LOC=0x11 (0x11<<5)
// CNT=2    (2<<0)
CMD_SYNCH    HEX_0x1 HEX_0xE HEX_0x2 HEX_0x2   PARITY_1

write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x1807 );
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x00, 0xbd2e);
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x04, 0x64f9);
RESPONSE_WORD_1
RESPONSE_WORD_X
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x1e22 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 2 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_BC_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x1e22 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x1807 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0xbd2e);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x64f9);


IDLE


//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_RT_RX.c", "RT_etpu_test\\RT_RtToBc_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_RT_TX.c", "RT_etpu_test\\RT_RtToBc_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
