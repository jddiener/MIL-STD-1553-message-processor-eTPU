// Remote Terminal test
//
// Test processing of transmission inhibit feature

#define CONFIG_RT
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

S32 i;
for (i = 0; i < 2; i++)
{
    if (i == 0) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0);
    if (i == 1) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0xff);

//------------------------------------------------------------------------------
// @@L1 Remote Terminal (RT) Transmit Inhibit Tests
//------------------------------------------------------------------------------

//--------------------------------------------------------
// @@L2 Test: RT to BC 'Transmit' Transfer, matching terminal address (transmit inhibited)
// @@I 0x40001280

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
wait_time(10);

// inhibit transmission
write_chan_data8( TX_A, _CPBA8_MS1553__txInhibit_, 1);

// @@d  Test a transmit message from specified RT to the BC
// @@d  at address '4' with three data words (data inhibited, command illegalized)

IDLE
// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=1    (1<<10)
// LOC=0x11 (0x11<<5)
// CNT=3    (3<<0)
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x3   PARITY_1

write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2000 );
write_chan_data16( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x00, 0x815f);
write_chan_data16( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x02, 0x5663);
write_chan_data16( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x04, 0x64f9);
RESPONSE_WORD_1
RESPONSE_WORD_X
RESPONSE_WORD_X
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2623 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
//VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_BC_XFR);
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2623 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );

// enable transmission
write_chan_data8( TX_A, _CPBA8_MS1553__txInhibit_, 0);

// @@d  Now re-enable data word transmission for valid RT transmit

IDLE
// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=1    (1<<10)
// LOC=0x11 (0x11<<5)
// CNT=3    (3<<0)
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x3   PARITY_1

write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2000 );
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x00, 0x815f);
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x04, 0x5663);
write_chan_data24( TX_A, _CPBA_ARRAY_MS1553__txBuf_ + 0x08, 0x64f9);
RESPONSE_WORD_1
RESPONSE_WORD_X
RESPONSE_WORD_X
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2623 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_BC_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2623 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//--------------------------------------------------------
// @@L2 Test: BC to RT 'Receive' Message, matching terminal address (transmit inhibited)
// @@I 0x40001180

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
wait_time(10);

// inhibit transmission
write_chan_data8( TX_A, _CPBA8_MS1553__txInhibit_, 1);

// @@d  Test a message from the controller to the Receiver RT
// @@d  at address '4' with three data words.

IDLE
// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=0    (0<<10)
// LOC=0x11 (0x11<<5)
// CNT=3    (3<<0)
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x3   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0

//IDLE
// Terminal4.status
// RT=4    (4<<11)
// Err=0   (0<<0)
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_1
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2000 );
RESPONSE_WORD_1

IDLE


VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
//VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_b.verify_chan_data8 ( MT_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);

// enable transmission
write_chan_data8( TX_A, _CPBA8_MS1553__txInhibit_, 0);

// @@d  Now re-enable data word transmission for valid RT receive

IDLE
// Master.Command(Terminal4)
// RT=4     (4<<11)
// R/T=0    (0<<10)
// LOC=0x11 (0x11<<5)
// CNT=3    (3<<0)
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x3   PARITY_0
// Terminal4.data  (3X)
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0

//IDLE
// Terminal4.status
// RT=4    (4<<11)
// Err=0   (0<<0)
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_1
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2000 );
RESPONSE_WORD_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
verify_chan_data24( RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
VERIFY_NO_MT_ERRORS
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//--------------------------------------------------------
// @@L2 Test: Mode Command with data (transmit), matching terminal address (transmit inhibited)
// @@I 0x40001580

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
wait_time(10);

// inhibit transmission
write_chan_data8( TX_A, _CPBA8_MS1553__txInhibit_, 1);

IDLE
// Master.Command
// RT=4          (4<<11)
// R/T=1         (1<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=0x12     (0x12<<0)
CMD_SYNCH    HEX_0x2 HEX_0x7 HEX_0xF HEX_0x2   PARITY_0
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2001 );
write_chan_data24( TX_A, _CPBA24_MS1553__txModeWord_, 0x5a5a );
RESPONSE_WORD_1
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITH_DATA);
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );

// enable transmission
write_chan_data8( TX_A, _CPBA8_MS1553__txInhibit_, 0);

// @@d  Now re-enable data word transmission for valid RT mode data transmit

IDLE
// Master.Command
// RT=4          (4<<11)
// R/T=1         (1<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=0x12     (0x12<<0)
CMD_SYNCH    HEX_0x2 HEX_0x7 HEX_0xF HEX_0x2   PARITY_0
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2001 );
write_chan_data24( TX_A, _CPBA24_MS1553__txModeWord_, 0x5a5a );
RESPONSE_WORD_1
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x5a5a );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2001 );

} // for loop


//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_RT_RX.c", "RT_etpu_test\\RT_TxInhibit_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_RT_TX.c", "RT_etpu_test\\RT_TxInhibit_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
