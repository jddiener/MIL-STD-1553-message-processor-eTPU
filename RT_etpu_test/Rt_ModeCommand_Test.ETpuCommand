// Remote Terminal test
//
// Test processing of Mode Command messages

#define CONFIG_RT
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

S32 i;
for (i = 0; i < 2; i++)
{
    if (i == 0) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0);
    if (i == 1) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0xff);

//------------------------------------------------------------------------------
// @@L1 Remote Terminal (RT) Mode Command Functional Tests
//------------------------------------------------------------------------------

//--------------------------------------------------------
// @@L2 Test: Mode Command without data, with and without matching terminal address
// @@I 0x40000400

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
wait_time(10);


IDLE
// Master.Command
// RT=7          (7<<11)
// R/T=1         (1<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=2         (2<<0)
CMD_SYNCH    HEX_0x3 HEX_0xF HEX_0xE HEX_0x2   PARITY_1
IDLE
// @@d  Receiver RT of the mode code returns a Status Word but no Data Words
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITHOUT_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x3fe2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );


IDLE
// Master.Command
// RT=4          (4<<11)
// R/T=1         (1<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=2         (2<<0)
CMD_SYNCH    HEX_0x2 HEX_0x7 HEX_0xE HEX_0x2   PARITY_1

// @@d  Receiver RT of the mode code returns a Status Word but no Data Words
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2007 );
RESPONSE_WORD_1

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x27e2 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITHOUT_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x27e2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2007 );


//--------------------------------------------------------
// @@L2 Test: Mode Command with data (transmit), with and without matching terminal address
// @@I 0x40000500


RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command
// RT=7          (7<<11)
// R/T=1         (1<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=0x12     (0x12<<0)
CMD_SYNCH    HEX_0x3 HEX_0xF HEX_0xF HEX_0x2   PARITY_0
IDLE
// @@d  Receiver RT of the mode code returns a Status Word and one Data Word
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x3ff2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x815f );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );


IDLE
// Master.Command
// RT=4          (4<<11)
// R/T=1         (1<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=0x12     (0x12<<0)
CMD_SYNCH    HEX_0x2 HEX_0x7 HEX_0xF HEX_0x2   PARITY_0
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2001 );
write_chan_data24( TX_A, _CPBA24_MS1553__txModeWord_, 0x5a5a );
RESPONSE_WORD_1
RESPONSE_WORD_X

IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x5a5a );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2001 );


//--------------------------------------------------------
// @@L2 Test: Mode Command with data (receive), with and without matching terminal address
// @@I 0x40000600


RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command
// RT=7          (7<<11)
// R/T=0         (0<<10)
// SUB_ADDR=0x00 (0x00<<5)  (Mode Code: 00000b)
// MODE=0x12     (0x12<<0)
CMD_SYNCH    HEX_0x3 HEX_0x8 HEX_0x1 HEX_0x2   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
IDLE
// @@d  Receiver RT of the mode code returns a Status Word and one Data Word
CMD_SYNCH    HEX_0x3 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_RCV_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x3812 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x815f );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x3800 );

IDLE
// Master.Command
// RT=4          (4<<11)
// R/T=0         (0<<10)
// SUB_ADDR=0x00 (0x00<<5)  (Mode Code: 00000b)
// MODE=0x12     (0x12<<0)
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x1 HEX_0x2   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
write_chan_data24( TX_A, _CPBA24_MS1553__txStatusWord_, 0x2011 );
RESPONSE_WORD_1

IDLE 

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2012 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, 0x815f );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_RCV_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2012 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x815f );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2011 );



//--------------------------------------------------------
// @@L2 Test: Mode Command broadcast without data
// @@I 0x40000900


RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command
// RT=1F          (0x1F<<11)
// R/T=1         (1<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=2         (2<<0)
CMD_SYNCH    HEX_0xF HEX_0xF HEX_0xE HEX_0x2   PARITY_1
IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0xffe2 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITHOUT_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xffe2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );


//--------------------------------------------------------
// @@L2 Test: Mode Command broadcast with data
// @@I 0x40000A00


RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
IDLE

// Master.Command
// RT=1F         (0x1F<<11)
// R/T=0         (0<<10)
// SUB_ADDR=0x1F (0x1F<<5)  (Mode Code: 11111b)
// MODE=0x12     (0x12<<0)
CMD_SYNCH    HEX_0xF HEX_0xB HEX_0xF HEX_0x2   PARITY_1
DATA_SYNCH    HEX_0x2 HEX_0x2 HEX_0xE HEX_0x0   PARITY_0
IDLE

VERIFY_NO_RT_ERRORS
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0xfbf2 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, 0x22e0 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xfbf2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x22e0 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );

} // for loop


//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_RT_RX.c", "RT_etpu_test\\RT_ModeCommand_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_RT_TX.c", "RT_etpu_test\\RT_ModeCommand_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
