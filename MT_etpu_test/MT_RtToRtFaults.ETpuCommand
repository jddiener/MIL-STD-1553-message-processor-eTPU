// Monitor Terminal test
//
// Test fault detection on RT->RT messages

#define CONFIG_MT
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

//------------------------------------------------------------------------------
// @@L1 RT To RT Message Fault Tests
// @@d  Test all 'RT To RT' message faults
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// @@L2 FAULT: Missing Bit Error
// @@I  0x20010300

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE
// @@d Inject a missing bit into the Receiver RT Status Word.
CMD_SYNCH    D1 D0 D1 MISSING_BIT HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, MISSING_BIT_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, MISSING_BIT_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Parity Error
// @@I  0x20010310

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0xC   PARITY_1
IDLE
// @@d Inject a parity error into the Receiver RT's Status Word.
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, PARITY_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, PARITY_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x566C);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Missing Idle A
// @@I  0x20010320

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
// @@d Inject an errant Data Word where the first IDLE is expected.
DATA_SYNCH    HEX_0x4 HEX_0x8 HEX_0x3 HEX_0xC   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, EXPECTED_IDLE_MISSING_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x08);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2221);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Missing Idle A
// @@I  0x20010330

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
// @@d Inject an errant Status Word where the first IDLE is expected.
CMD_SYNCH    HEX_0x4 HEX_0x8 HEX_0x3 HEX_0xC   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, EXPECTED_IDLE_MISSING_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x08);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2221);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Idle A Timeout
// @@I  0x20010340

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
// @@d Extend the IDLE period beyond the maximum allowed
// @@d for the transmitting RT to respond.
INVALID_LONG_IDLE
wait_time(1);

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, RT_STATUS_TIMEOUT_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x08);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2221);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Unexpected Data Word
// @@I  0x20010350

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
// @@d Injected a Data Word where the RT Transmitter Status Word is expected.
DATA_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, RT_DATA_WHEN_EXPECTED_STATUS_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_DATA_WHEN_EXPECTED_STATUS_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x0C);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0C, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Unexpected Status Word
// @@I  0x20010360

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
// @@d Injected a Status Word where the RT Transmitter Data Word is expected.
CMD_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, RT_STATUS_WHEN_EXPECTED_DATA_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_WHEN_EXPECTED_DATA_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x0C);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0C, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Too Few Data Words
// @@I  0x20010370

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
// @@d Expecting two data words but receive only one instead.
//DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE

wait_time(1.0);

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, TOO_FEW_DATA_WORDS_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, TOO_FEW_DATA_WORDS_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x0C);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0C, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: No Data Words
// @@I  0x20010380

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
// @@d Expecting 1 data words but receive 0 instead.
//DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
IDLE

wait_time(1.0);

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, TOO_FEW_DATA_WORDS_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, TOO_FEW_DATA_WORDS_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x0C);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2221);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0C, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Too Many Data Words
// @@I  0x20010390

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
// @@d The Transmitting RT sends one more data word than is expected.
DATA_SYNCH    HEX_0x1 HEX_0x5 HEX_0x8 HEX_0xF   PARITY_1
IDLE
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
//IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, EXPECTED_IDLE_MISSING_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Too Many Data Words at minimum
// @@I  0x200103A0

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
// @@d Expecting the minimum (1) number of data words, but receive 2
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
//IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, EXPECTED_IDLE_MISSING_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x0C);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2221);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0C, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT:  Errant Status Word After Data
// @@I  0x200103B0

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
// @@d Where the second idle is expected, there is an errant Status Word instead.
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, EXPECTED_IDLE_MISSING_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Idle B Timeout
// @@I  0x200103C0

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
// @@d Second IDLE continues when the Receiving RT's Status Word is expected.
INVALID_LONG_IDLE

wait_time(1);

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, RT_STATUS_TIMEOUT_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: RT Data Word instead of Receiver Status Word
// @@I  0x200103D0

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE
// @@d Where the Receiver RT Status word is expected, a Data Word is received instead.
DATA_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, RT_DATA_WHEN_EXPECTED_STATUS_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_DATA_WHEN_EXPECTED_STATUS_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0E, 0xffff, 0x2000);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Receiver RT Extra Status Word
// @@I  0x200103E0

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
// @@d Where final IDLE is expectted, there is a second Status Word instead.
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, EXPECTED_IDLE_MISSING_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0E, 0xffff, 0x2000);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);

//------------------------------------------------------------------------------
// @@L2 FAULT: Receiver RT Status Extra Data Word
// @@I  0x200103F0

RESET_RECEIVE_BUFFER
wait_time(10);

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x2   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x2   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
// @@d Where final IDLE is expectted, there is a second Status Word instead.
DATA_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x00, 0xff, EXPECTED_IDLE_MISSING_ERROR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x01, 0xffffff, RX_DATA_BUFFER+0x10);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x2222);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0c, 0xffff, 0x2622);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2222);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2622);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815F);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, INVALID_WORD);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x0E, 0xffff, 0x2000);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x10, 0xffffffff, 0);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);

// @@d Verify that following a fault a new & valid message can be received.

IDLE
CMD_SYNCH    HEX_0x2 HEX_0x2 HEX_0x2 HEX_0x1   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x6 HEX_0x2 HEX_0x1   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0xF HEX_0x0 HEX_0x9 HEX_0xD   PARITY_0
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
//verify_mem_u8(ETPU_DATA_SPACE,  RX_DATA_BUFFER + 0x10, 0xff, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, NO_ERROR);
//verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x11, 0xffffff, RX_DATA_BUFFER+0x20);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x14, 0xffff, 0x2221);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x16, 0xffff, 0x2621);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
verify_chan_data24( RX_A, _CPBA24_MS1553__cmdWord2_, 0x2621);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x18, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0xF09D);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1C, 0xffff, 0x2000);
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2000);
//verify_mem_u16(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x1E, 0xffff, INVALID_WORD);
//verify_mem_u32(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x20, 0xffffffff, 0);


save_cumulative_file_coverage("etec_MS1553_MT_RX.c", "MT_etpu_test\\MT_RtToRtFaults.CoverageData");


//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
