// Bus Controller test
//
// Test processing of RT->RT messages

#define CONFIG_BC
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

wait_time(10);

S32 i;
for (i = 0; i < 2; i++)
{
    if (i == 0) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0);
    if (i == 1) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0xff);

//------------------------------------------------------------------------------
// @@L1 Bus Controller (BC) RT-RT Functional Tests
//------------------------------------------------------------------------------

//--------------------------------------------------------
// @@L2 Test: RT to RT Transfer, matching receive terminal address for test RT
// @@I 0x80000300

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2223); // RT 4 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1e23); // RT 3 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 3);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_1
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2003);
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x2003 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord2_, 0x1e23 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord2_, 0x1e23 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord2_, 0x2003 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//--------------------------------------------------------
// @@L2 Test: RT to RT Transfer, matching transmit terminal address for test RT
// @@I 0x80000310

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x1a23); // RT 3 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x2623); // RT 4 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 3);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2003);
write_global_data24(RT_TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(RT_TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(RT_TX_DATA_BUFFER + 0x08, 0x64f9);
RESPONSE_WORD_1
RESPONSE_WORD_X
RESPONSE_WORD_X
RESPONSE_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2003 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, 0x1800 );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x1a23 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord2_, 0x2623 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x1a23 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord2_, 0x2623 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2003 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord2_, 0x1800 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//--------------------------------------------------------
// @@L2 Test: RT to RT Broadcast Transfer, matching transmit terminal address for test RT
// @@I 0x80000320

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_BROADCAST_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0xfa23); // broadcast receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x2623); // RT 4 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 3);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2003);
write_global_data24(RT_TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(RT_TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(RT_TX_DATA_BUFFER + 0x08, 0x64f9);
RESPONSE_WORD_1
RESPONSE_WORD_X
RESPONSE_WORD_X
RESPONSE_WORD_X

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2003 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_BROADCAST_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0xfa23 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord2_, 0x2623 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, INVALID_WORD);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_RT_BROADCAST_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xfa23 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord2_, 0x2623 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2003 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//--------------------------------------------------------
// @@L2 Test: RT to RT Broadcast Transfer, test RT just broadcast receiver
// @@I 0x80000330

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_BROADCAST_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0xfa23); // broadcast receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1e23); // RT 3 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 3);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_1
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_0

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD );
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_BROADCAST_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0xfa23 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord2_, 0x1e23 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, RT_TO_RT_BROADCAST_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xfa23 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord2_, 0x1e23 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x1800 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord2_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);

}


//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_BC_RX.c", "BC_etpu_test\\BC_RtToRt_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_BC_TX.c", "BC_etpu_test\\BC_RtToRt_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
