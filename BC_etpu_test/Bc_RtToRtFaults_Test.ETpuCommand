// Bus Controller test
//
// Test processing of faulty RT->RT messages

#define CONFIG_BC
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

wait_time(10);

//------------------------------------------------------------------------------
// @@L1 Bus Controller (BC) RT-RT Fault Tests
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// @@L2 FAULT: Missing Bit Error
// @@I  0x80010300

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a21); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x3621); // RT 6 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 1);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH     HEX_0x3 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_1
DATA_SYNCH    HEX_0x1 HEX_0x1 HEX_0x1 HEX_0x1   PARITY_1
IDLE
// @@d Inject a missing bit into the Receiver RT Status Word.
CMD_SYNCH    HEX_0x3 HEX_0x8 D1 D0 D1 MISSING_BIT HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, MISSING_BIT_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Parity Error
// @@I  0x80010310

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE

CMD_SYNCH    HEX_0x1 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0xC   PARITY_1
IDLE
// @@d Inject a parity error into the Receiver RT's Status Word.
CMD_SYNCH    HEX_0x3 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, PARITY_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Missing Idle A
// @@I  0x80010320

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a21); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1621); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 1);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
// @@d Inject an errant Data Word where the first IDLE is expected.
DATA_SYNCH    HEX_0x4 HEX_0x8 HEX_0x3 HEX_0xC   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Idle A Timeout
// @@I  0x80010340

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a21); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1621); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 1);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
// @@d Extend the IDLE period beyond the maximum allowed
// @@d for the transmitting RT to respond.
INVALID_LONG_IDLE
wait_time(1);

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Unexpected Data Word
// @@I  0x80010350

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
// @@d Injected a Data Word where the RT Transmitter Status Word is expected.
DATA_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_DATA_WHEN_EXPECTED_STATUS_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Unexpected Status Word
// @@I  0x80010360

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
// @@d Injected a Status Word where the RT Transmitter Data Word is expected.
CMD_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_WHEN_EXPECTED_DATA_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Too Few Data Words
// @@I  0x80010370

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
// @@d Expecting two data words but receive only one instead.
//DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE

wait_time(1.0);

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, TOO_FEW_DATA_WORDS_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Too Many Data Words
// @@I  0x80010390

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
// @@d The Transmitting RT sends one more data word than is expected.
DATA_SYNCH    HEX_0x1 HEX_0x5 HEX_0x8 HEX_0xF   PARITY_1
IDLE
//CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
//IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Idle B Timeout
// @@I  0x800103C0

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
// @@d Second IDLE continues when the Receiving RT's Status Word is expected.
INVALID_LONG_IDLE

wait_time(1);

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: RT Data Word instead of Receiver Status Word
// @@I  0x800103D0

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE
// @@d Where the Receiver RT Status word is expected, a Data Word is received instead.
DATA_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_DATA_WHEN_EXPECTED_STATUS_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);


//------------------------------------------------------------------------------
// @@L2 FAULT: Receiver RT Extra Status Word
// @@I  0x800103E0

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, RT_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a22); // RT 7 receive
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord2_, 0x1622); // RT 2 transmit
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_chan_data24( TX_A, _CPBA24_MS1553__rxDataWordCnt_, 2);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x1 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
DATA_SYNCH    HEX_0x8 HEX_0x1 HEX_0x5 HEX_0xF   PARITY_1
DATA_SYNCH    HEX_0x5 HEX_0x6 HEX_0x6 HEX_0x3   PARITY_1
IDLE
CMD_SYNCH    HEX_0x3 HEX_0x8 HEX_0x0 HEX_0x0   PARITY_0
// @@d Where final IDLE is expectted, there is a second Status Word instead.
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2221);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2221 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 1 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);



//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_BC_RX.c", "BC_etpu_test\\BC_RtToRtFaults_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_BC_TX.c", "BC_etpu_test\\BC_RtToRtFaults_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
