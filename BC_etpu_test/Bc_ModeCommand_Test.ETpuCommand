// Bus Controller test
//
// Test processing of Mode Command messages

#define CONFIG_BC
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

wait_time(10);

S32 i;
for (i = 0; i < 2; i++)
{
    if (i == 0) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0);
    if (i == 1) write_chan_data8(RX_A, _CPBA8_MS1553__messageStatusInterruptMask_, 0xff);

//------------------------------------------------------------------------------
// @@L1 Bus Controller (BC) Mode Command Functional Tests
//------------------------------------------------------------------------------

//--------------------------------------------------------
// @@L2 Test: Mode Command without data
// @@I 0x80000400

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITHOUT_DATA);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x27e2);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 0);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2007);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2007 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITHOUT_DATA);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x27e2 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 0 );
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITHOUT_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x27e2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2007 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 0 );


//--------------------------------------------------------
// @@L2 Test: Mode Command with data (transmit)
// @@I 0x80000500

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITH_DATA);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x27f2);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 0);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
eTPU_B.write_chan_data24( RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2001 );
eTPU_B.write_chan_data24( RT_RX_A, _CPBA24_MS1553__txModeWord_, 0x5a5a );
RESPONSE_WORD_1
RESPONSE_WORD_X

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2001 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, 0x5a5a );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITH_DATA);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 0 );
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_XMT_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x27f2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2001 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x5a5a );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 0 );


//--------------------------------------------------------
// @@L2 Test: Mode Command with data (receive)
// @@I 0x80000600

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, MODE_RCV_WITH_DATA);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2012);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
eTPU_B.write_chan_data24( RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2011 );
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2011 );
verify_chan_data24( RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, MODE_RCV_WITH_DATA);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2012 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__rxModeWord_, 0x815f );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 0 );
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_RCV_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2012 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2011 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x815f );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 0 );


//--------------------------------------------------------
// @@L2 Test: Mode Command broadcast without data
// @@I 0x80000900

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITHOUT_DATA);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0xffe2);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 0);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITHOUT_DATA);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0xffe2 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 0 );
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITHOUT_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xffe2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 0 );


//--------------------------------------------------------
// @@L2 Test: Mode Command broadcast with data
// @@I 0x80000A00

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITH_DATA);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0xfbf2);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 1);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x22e0);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITH_DATA);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0xfbf2 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__rxModeWord_, 0x22e0 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 0 );
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, MODE_BROADCAST_WITH_DATA);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0xfbf2 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, INVALID_WORD );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxModeWord_, 0x22e0 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 0 );

} // for loop


//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_BC_RX.c", "BC_etpu_test\\BC_ModeCommand_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_BC_TX.c", "BC_etpu_test\\BC_ModeCommand_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
