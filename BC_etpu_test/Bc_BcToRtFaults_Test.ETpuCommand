// Bus Controller test
//
// Test processing of faulty BC->RT messages

#define CONFIG_BC
#include "..\common_test\CommonInit.ETpuCommand"

// Must be specified on the command line
//vector("NoWaveform.Vector");

wait_time(10);

//------------------------------------------------------------------------------
// @@L1 Bus Controller (BC) BC-RT Fault Tests
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// @@L2 FAULT: Missing Bit Error
// @@I 0x80010100

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x6223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
IDLE
// @@d Inject a missing bit into a data word.
CMD_SYNCH    HEX_0x6 HEX_0x4 D1 D1 D1 MISSING_BIT HEX_0x9   PARITY_0

IDLE 

// @@d Verify that the error is detected,

VERIFY_NO_ERRORS
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, MISSING_BIT_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//------------------------------------------------------------------------------
// @@L2 FAULT: Parity Error
// @@I  0x80010110

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x6223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
IDLE
// @@d Inject a parity error into status.
DATA_SYNCH    HEX_0x6 HEX_0x4 HEX_0xF HEX_0x9   PARITY_1 // parity error
IDLE

// @@d Verify that the error is detected,

VERIFY_NO_ERRORS
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, PARITY_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//------------------------------------------------------------------------------
// @@L2 FAULT: Too Many Data Words
// @@I  0x80010150

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x6223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
// @@d Inject an extra data word after all the expected data words have been received.
DATA_SYNCH    HEX_0x4 HEX_0x6 HEX_0x9 HEX_0xF   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//------------------------------------------------------------------------------
// @@L2 FAULT: RT Status Timeout
// @@I  0x80010180

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a24);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 4);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
write_global_data24(TX_DATA_BUFFER + 0x0c, 0x85f1);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
BC_WORD_X
INVALID_LONG_IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_STATUS_TIMEOUT_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//------------------------------------------------------------------------------
// @@L2 FAULT: Data Word Instead of Status Word
// @@I  0x80010190

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a23);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
IDLE
DATA_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, RT_DATA_WHEN_EXPECTED_STATUS_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);


//------------------------------------------------------------------------------
// @@L2 FAULT: Extra Status Word
// @@I  0x800101A0

RESET_RECEIVE_BUFFER
RESET_MT_RECEIVE_BUFFER
RESET_RT_RECEIVE_BUFFER
wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x3a23);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
IDLE
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x1 HEX_0x0   PARITY_1
CMD_SYNCH    HEX_0x2 HEX_0x0 HEX_0x0 HEX_0x0   PARITY_0
IDLE

VERIFY_NO_ERRORS
// @@d Verify that the fault is reported.
verify_chan_data8 ( RX_A, _CPBA8_MS1553__errorStatus_, EXPECTED_IDLE_MISSING_ERROR);

// @@d Verify that a new & valid message can be received.

wait_time(10);

write_chan_data8(  TX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
write_chan_data24( TX_A, _CPBA24_MS1553__cmdWord1_, 0x2223);
write_chan_data24( TX_A, _CPBA24_MS1553__txWordCnt_, 3);
write_global_data24(TX_DATA_BUFFER + 0x00, 0x815f);
write_global_data24(TX_DATA_BUFFER + 0x04, 0x5663);
write_global_data24(TX_DATA_BUFFER + 0x08, 0x64f9);
eTPU_B.write_chan_data24(RT_RX_A, _CPBA24_MS1553__txStatusWord_, 0x2000);
// send message
write_chan_hsrr(TX_A, MS1553_BC_START_MESSAGE);
BC_WORD_1
BC_WORD_X
BC_WORD_X
BC_WORD_X
RESPONSE_WORD_1

IDLE 

VERIFY_NO_BC_ERRORS
VERIFY_NO_MT_ERRORS
VERIFY_NO_SUB_RT_ERRORS
// verify BC
verify_chan_data24( RX_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
// verify RT
eTPU_B.verify_chan_data8 ( RT_RX_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( RT_RX_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, RT_RX_DATA_BUFFER + 0x08, 0xffff, 0x64f9);
// verify MT
eTPU_B.verify_chan_data8 ( MT_A, _CPBA8_MS1553__messageType_, BC_TO_RT_XFR);
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__cmdWord1_, 0x2223 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__rxStatusWord1_, 0x2000 );
eTPU_B.verify_chan_data24( MT_A, _CPBA24_MS1553__dataWordCnt_, 3 );
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x00, 0xffff, 0x815f);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x04, 0xffff, 0x5663);
verify_mem_u24(ETPU_DATA_SPACE, MT_DATA_BUFFER + 0x08, 0xffff, 0x64f9);



//--------------------------------------------------------

save_cumulative_file_coverage("etec_MS1553_BC_RX.c", "BC_etpu_test\\BC_BcToRtFaults_Test_RX.CoverageData");
save_cumulative_file_coverage("etec_MS1553_BC_TX.c", "BC_etpu_test\\BC_BcToRtFaults_Test_TX.CoverageData");

//--------------------------------------------------------
//  That is all she wrote!!
#ifdef _ASH_WARE_AUTO_RUN_
wait_time(300);
exit();
#else
print("All tests are done!!");
#endif // _ASH_WARE_AUTO_RUN_
