// This file is auto-generated by the ASH WARE ETEC Linker.
// It contains useful information for host-CPU side driver code
//    !!!   DO NOT EDIT THIS FILE   !!!
// Copyright (C) 2015 ASH WARE, Inc.

#ifndef __etpu_c_set_defines_H
#define __etpu_c_set_defines_H

// Register ECR, field ETB, byte address, Each Engine
// ECR.ETB = (C_ENTRY_TABLE_BASE_ADDR_)>>11;
#define C_ENTRY_TABLE_BASE_ADDR_                 0x00

// Starting DATA RAM address where the block copy of initialized data begins
// memcpy( ETPU_DATA_RAM_START+C_GLOBAL_INIT_DATA_ADDR_, &_global_mem_init[0], _GLOBAL_DATA_SIZE_);
#define C_GLOBAL_INIT_DATA_ADDR_                 0x00

// Register MISCCMPR - ETPU MISC Compare Register
// MISCCMPR = C_MISC_VALUE_;
#define C_MISC_VALUE_                            0xC7422023

// SCM Off Opcode - opcode returned when in the weeds
// SCMOFFDATAR = C_SCM_OFF_OPCODE_;
#define C_SCM_OFF_OPCODE_                        0xFFD145A7

// exported autodef macros from user "#pragma export_autodef_macro" commands
// none specified

// exported autodef text from user "#pragma export_autodef_text" commands
// none specified

// 32-bit Global Variable address
// address = SPRAM + C_GLOB_VAR32__Global_error_data_
#define C_GLOB_VAR32__Global_error_data_         0x00
// defines for type enum TX_BC_STATE
// size of a tag type (including padding as defined by sizeof operator)
// value (sizeof) = C_GLOB_TAG_TYPE_SIZE_TX_BC_STATE_
#define C_GLOB_TAG_TYPE_SIZE_TX_BC_STATE_        0x01
// values of the literals of an enum type
// value = C_GLOB_ENUM_LITERAL_TX_BC_STATE_TBS_CMD_
#define C_GLOB_ENUM_LITERAL_TX_BC_STATE_TBS_CMD_ 0x01
#define C_GLOB_ENUM_LITERAL_TX_BC_STATE_TBS_CMD_DATA_ 0x02
#define C_GLOB_ENUM_LITERAL_TX_BC_STATE_TBS_CMD_CMD_ 0x04
// defines for type enum TX_RT_STATE
#define C_GLOB_TAG_TYPE_SIZE_TX_RT_STATE_        0x01
#define C_GLOB_ENUM_LITERAL_TX_RT_STATE_TRS_STATUS_ 0x01
#define C_GLOB_ENUM_LITERAL_TX_RT_STATE_TRS_STATUS_DATA_ 0x02
#define C_GLOB_ENUM_LITERAL_TX_RT_STATE_TRS_STATUS_MODE_ 0x04
// defines for type enum TX_TYPE
#define C_GLOB_TAG_TYPE_SIZE_TX_TYPE_            0x01
#define C_GLOB_ENUM_LITERAL_TX_TYPE_TT_CMD_STATUS_ 0x00
#define C_GLOB_ENUM_LITERAL_TX_TYPE_TT_DATA_     0x01
// defines for type enum MS1553_STATES
#define C_GLOB_TAG_TYPE_SIZE_MS1553_STATES_      0x01
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_AWAIT_MESSAGE_ 0x00
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_TBD_TO_RT_AWAITING_DATA_ 0x01
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_DATA_ 0x02
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_STATUS_ 0x03
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_STATUS_ 0x04
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_DATA_ 0x05
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_STATUS_A_ 0x06
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_DATA_ 0x07
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_STATUS_B_ 0x08
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_STATUS_ 0x09
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_DATA_ 0x0A
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_RBD_AWAITING_DATA_ 0x0B
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_DATA_ 0x0C
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_STATUS_ 0x0D
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_X_AWAITING_STATUS_ 0x0E
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_AWAIT_IDLE_ 0x0F
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_IDLE_A_ 0x10
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_IDLE_B_ 0x11
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_IDLE_A_ 0x12
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_IDLE_B_ 0x13
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_IDLE_A_ 0x14
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_IDLE_B_ 0x15
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_IDLE_C_ 0x16
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_IDLE_A_ 0x17
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_IDLE_B_ 0x18
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_RBD_AWAITING_IDLE_ 0x19
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_IDLE_A_ 0x1A
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_IDLE_B_ 0x1B
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_XB_AWAITING_IDLE_ 0x1C
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_X_AWAITING_IDLE_A_ 0x1D
#define C_GLOB_ENUM_LITERAL_MS1553_STATES_MS1553_STATE_MC_X_AWAITING_IDLE_B_ 0x1E
// defines for type enum SYNCH_STATES
#define C_GLOB_TAG_TYPE_SIZE_SYNCH_STATES_       0x01
#define C_GLOB_ENUM_LITERAL_SYNCH_STATES_SYNCH_STATE_UNSYNCHED_ 0x00
#define C_GLOB_ENUM_LITERAL_SYNCH_STATES_SYNCH_STATE_CMD_STATUS_WORD_ 0x01
#define C_GLOB_ENUM_LITERAL_SYNCH_STATES_SYNCH_STATE_DATA_WORD_ 0x02

// Global Variable type information
// Can be used in conjunction with other auto-define information to simplify interfaces
#define C_GLOB_VAR_TYPE__Global_error_data_      T_sint32

// Global Variable/Data Size (not including scratchpad)
// address (end) = SPRAM + C_GLOBAL_VAR_SIZE_
#define C_GLOBAL_VAR_SIZE_                       0x04

// Global Scratchpad Base Address in bytes
// address (start) = SPRAM + C_GLOBAL_SCRATCHPAD_BASE_ADDR_
#define C_GLOBAL_SCRATCHPAD_BASE_ADDR_           0x04

// Global Scratchpad Data Size in bytes
// address (end) = SPRAM + _GLOBAL_VAR_SIZE_ + C_GLOBAL_SCRATCHPAD_SIZE_
#define C_GLOBAL_SCRATCHPAD_SIZE_                0x00

// Total Global Data Size (starts at address 0, includes any global scratchpad allocation)
// address (end) = SPRAM + C_GLOBAL_DATA_SIZE_
#define C_GLOBAL_DATA_SIZE_                      0x04

// User Engine Variable/Data Size (not including scratchpad)
// address (end) = ((ECR_X.ERBA)<<9) + C_ENGINE_VAR_SIZE_
#define C_ENGINE_VAR_SIZE_                       0x00

// Engine Scratchpad Data Size in bytes
// address (end) = ((ECR_X.ERBA)<<9) + _ENGINE_VAR_SIZE_ + C_ENGINE_SCRATCHPAD_SIZE_
#define C_ENGINE_SCRATCHPAD_SIZE_                0x00

// Total Engine Data Size (starts at engine address 0, includes any engine scratchpad allocation)
// address (end) = ((ECR_X.ERBA)<<9) + C_ENGINE_DATA_SIZE_
#define C_ENGINE_DATA_SIZE_                      0x00

// Amount of DATA RAM (in bytes) required for the stack
// (ideally, programs require none)
// #define CHANNEL_FRAME_START (((_GLOBAL_DATA_SIZE_ + C_STACK_SIZE_) + 7) & ~7)
#define C_STACK_SIZE_                            0x00

// Default channel frame base address definitions
// One for the single eTPU case, one for the dual eTPU case
#define C_CHANNEL_FRAME_1ETPU_BASE_ADDR  0x8
#define C_CHANNEL_FRAME_2ETPU_BASE_ADDR  0x8

#if 0
// This section gives an example of how stack bases should
// be initialized for each new channel frame (replace FUNC1, etc.
// with actual function names) in a simulator script file.  Host
// code should use the same mechanism.  The conditional initialization
// is done because a channel frame will not have a stack base allocated
// if it is not needed.
#ifdef _CPBA24_FUNC1___STACKBASE_
write_chan_data24(FUNC1_CHAN1, _CPBA24_FUNC1___STACKBASE_, C_ETPU_A_STACK_BASE_ADDR);
#endif // _CPBA24_FUNC1___STACKBASE_
#ifdef _CPBA24_FUNC2___STACKBASE_
write_chan_data24(FUNC2_CHAN1, _CPBA24_FUNC2___STACKBASE_, C_ETPU_B_STACK_BASE_ADDR);
write_chan_data24(FUNC2_CHAN2, _CPBA24_FUNC2___STACKBASE_, C_ETPU_B_STACK_BASE_ADDR);
write_chan_data24(FUNC2_CHAN3, _CPBA24_FUNC2___STACKBASE_, C_ETPU_B_STACK_BASE_ADDR);
write_chan_data24(FUNC2_CHAN4, _CPBA24_FUNC2___STACKBASE_, C_ETPU_B_STACK_BASE_ADDR);
#endif // _CPBA24_FUNC2___STACKBASE_
// continue on through all channels for both eTPUs...
#endif // 0

//============================================================================
//==========     Tester

// Register CXCR, field CFS, Function Number, Each Channel
// CXCR.CFS = C_FUNCTION_NUM_Tester_;
#define C_FUNCTION_NUM_Tester_                   0x0B

// Register CXCR, field ETCS, Type (Alternate or Standard), Each Channel
// CXCR.ETCS = C_ENTRY_TABLE_TYPE_Tester_;
#define C_ENTRY_TABLE_TYPE_Tester_               0x00

// Register CXCR, field ETPD, Pin Direction (Input or Output), Each Channel
// CXCR.ETPD = C_ENTRY_TABLE_PIN_DIR_Tester_;
#define C_ENTRY_TABLE_PIN_DIR_Tester_            0x01

// 24-bit Channel Variable address offsets
// address = ((CXCR.CPBA)<<3) + C_CPBA24_Tester_linkToChanNum_
#define C_CPBA24_Tester_linkToChanNum_           0x01
#define C_CPBA24_Tester_LatencyStart_            0x05
#define C_CPBA24_Tester_LatencyDuration_         0x09
#define C_CPBA24_Tester_LatencyPeriod_           0x0D
#define C_CPBA24_Tester_EncodedForcedState_      0x11
#define C_CPBA24_Tester_latencyTimeStamp_        0x15

// Channel Variable type information
// Can be used in conjunction with other auto-define information to simplify interfaces
#define C_CPBA_TYPE_Tester_linkToChanNum_        T_sint24
#define C_CPBA_TYPE_Tester_LatencyStart_         T_sint24
#define C_CPBA_TYPE_Tester_LatencyDuration_      T_sint24
#define C_CPBA_TYPE_Tester_LatencyPeriod_        T_sint24
#define C_CPBA_TYPE_Tester_EncodedForcedState_   T_sint24
#define C_CPBA_TYPE_Tester_latencyTimeStamp_     T_sint24

// Channel Frame Size, amount of RAM required for each channel
// CXCR.CPBA (this) = CXCR.CPBA (last) + C_FRAME_SIZE_Tester_;
#define C_FRAME_SIZE_Tester_                     0x18

//============================================================================
//==========     MS1553

// Register CXCR, field CFS, Function Number, Each Channel
// CXCR.CFS = C_FUNCTION_NUM_MS1553_MS1553_RX_P_;
#define C_FUNCTION_NUM_MS1553_MS1553_RX_P_       0x00
#define C_FUNCTION_NUM_MS1553_MS1553_RX_N_       0x01
#define C_FUNCTION_NUM_MS1553_MS1553_MT_RX_P_    0x02
#define C_FUNCTION_NUM_MS1553_MS1553_MT_RX_N_    0x03
#define C_FUNCTION_NUM_MS1553_MS1553_RT_RX_P_    0x04
#define C_FUNCTION_NUM_MS1553_MS1553_RT_RX_N_    0x05
#define C_FUNCTION_NUM_MS1553_MS1553_BC_RX_P_    0x06
#define C_FUNCTION_NUM_MS1553_MS1553_BC_RX_N_    0x07
#define C_FUNCTION_NUM_MS1553_MS1553_TX_         0x08
#define C_FUNCTION_NUM_MS1553_MS1553_RT_TX_      0x09
#define C_FUNCTION_NUM_MS1553_MS1553_BC_TX_      0x0A

// Register CXCR, field ETCS, Type (Alternate or Standard), Each Channel
// CXCR.ETCS = C_ENTRY_TABLE_TYPE_MS1553_MS1553_RX_P_;
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_RX_P_   0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_RX_N_   0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_MT_RX_P_ 0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_MT_RX_N_ 0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_RT_RX_P_ 0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_RT_RX_N_ 0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_BC_RX_P_ 0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_BC_RX_N_ 0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_TX_     0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_RT_TX_  0x01
#define C_ENTRY_TABLE_TYPE_MS1553_MS1553_BC_TX_  0x01

// Register CXCR, field ETPD, Pin Direction (Input or Output), Each Channel
// CXCR.ETPD = C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_RX_P_;
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_RX_P_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_RX_N_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_MT_RX_P_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_MT_RX_N_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_RT_RX_P_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_RT_RX_N_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_BC_RX_P_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_BC_RX_N_ 0x00
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_TX_  0x01
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_RT_TX_ 0x01
#define C_ENTRY_TABLE_PIN_DIR_MS1553_MS1553_BC_TX_ 0x01

// 8-bit Channel Variable address offsets
// address = ((CXCR.CPBA)<<3) + C_CPBA8_MS1553__rxBaseChan_
#define C_CPBA8_MS1553__rxBaseChan_              0x00
#define C_CPBA8_MS1553__txBaseChan_              0x04
#define C_CPBA8_MS1553__parityError_             0x08
#define C_CPBA8_MS1553__missingBitError_         0x0C
#define C_CPBA8_MS1553__state_                   0x10
#define C_CPBA8_MS1553__validMessage_            0x14
#define C_CPBA8_MS1553__isBroadcastMsg_          0x18
#define C_CPBA8_BOOLBITOFFSET_MS1553__isBroadcastMsg_ 0x07
#define C_CPBA8_MS1553__isRtRtTransmitter_       0x18
#define C_CPBA8_BOOLBITOFFSET_MS1553__isRtRtTransmitter_ 0x06
#define C_CPBA8_MS1553__messageType_             0x1C
#define C_CPBA8_MS1553__messageStatus_           0x20
#define C_CPBA8_MS1553__messageStatusInterruptMask_ 0x24
#define C_CPBA8_MS1553__errorStatus_             0x28
#define C_CPBA8_MS1553__txParityCheck_           0x2C
#define C_CPBA8_MS1553__synchType_               0x30
#define C_CPBA8_MS1553__txType_                  0x34
#define C_CPBA8_MS1553__txInhibit_               0x38
#define C_CPBA8_MS1553__txDataWordInhibit_       0x3C
#define C_CPBA8_MS1553__bcMessageInProgress_     0x18
#define C_CPBA8_BOOLBITOFFSET_MS1553__bcMessageInProgress_ 0x05
#define C_CPBA8_MS1553__bcTxType_                0x40

// 24-bit Channel Variable address offsets
// address = ((CXCR.CPBA)<<3) + C_CPBA24_MS1553__firstBitDelineator_
#define C_CPBA24_MS1553__firstBitDelineator_     0x01
#define C_CPBA24_MS1553__0P50_bits_              0x05
#define C_CPBA24_MS1553__txBuffer_               0x09
#define C_CPBA24_MS1553__txBitCount_             0x0D
#define C_CPBA24_MS1553__terminalAddress_        0x11
#define C_CPBA24_MS1553__1P25_bits_              0x15
#define C_CPBA24_MS1553__1P50_bits_              0x19
#define C_CPBA24_MS1553__1P75_bits_              0x1D
#define C_CPBA24_MS1553__2P25_bits_              0x21
#define C_CPBA24_MS1553__2P50_bits_              0x25
#define C_CPBA24_MS1553__18P75_bits_             0x29
#define C_CPBA24_MS1553__LastEdgeOnA_            0x2D
#define C_CPBA24_MS1553__LastEdgeOnB_            0x31
#define C_CPBA24_MS1553__synchState_             0x35
#define C_CPBA24_MS1553__isLastEdgeAValid_       0x39
#define C_CPBA24_MS1553__isLastEdgeBValid_       0x3D
#define C_CPBA24_MS1553__rxBuffer_               0x41
#define C_CPBA24_MS1553__rxBitCount_             0x45
#define C_CPBA24_MS1553__rxParityCheck_          0x49
#define C_CPBA24_MS1553__rxBufPtr_               0xCD
#define C_CPBA24_MS1553__cmdWordBuffer_          0xD1
#define C_CPBA24_MS1553__rxDataWordCnt_          0xD5
#define C_CPBA24_MS1553__initIdleTimeout_        0xD9
#define C_CPBA24_MS1553__rtStatusTimeout_        0xDD
#define C_CPBA24_MS1553__seekIdleTimeout_        0xE1
#define C_CPBA24_MS1553__cmdWord1_               0xE5
#define C_CPBA24_MS1553__cmdWord2_               0xE9
#define C_CPBA24_MS1553__rxModeWord_             0xED
#define C_CPBA24_MS1553__rxStatusWord1_          0xF1
#define C_CPBA24_MS1553__rxStatusWord2_          0xF5
#define C_CPBA24_MS1553__dataWordCnt_            0xF9
#define C_CPBA24_MS1553__transmitWord_           0xFD
#define C_CPBA24_MS1553__transmitNextWord_       0x101
#define C_CPBA24_MS1553__txNextWordPtr_          0x105
#define C_CPBA24_MS1553__txEndTimestamp_         0x109
#define C_CPBA24_MS1553__txDelay_                0x10D
#define C_CPBA24_MS1553__txModeWord_             0x111
#define C_CPBA24_MS1553__txStatusWord_           0x115
#define C_CPBA24_MS1553__txWordCnt_              0x119
#define C_CPBA24_MS1553__txBufPtr_               0x19D

// Channel Array Variable address offsets
// address = ((CXCR.CPBA)<<3) + C_CPBA_ARRAY_MS1553__rxBuf_
#define C_CPBA_ARRAY_MS1553__rxBuf_              0x4D
#define C_CPBA_TYPE_ARRAY_MS1553__rxBuf_         T_uint24
#define C_CPBA_ARRAY_MS1553__rxBuf_DIM_1_LENGTH_ 0x20
#define C_CPBA_ARRAY_MS1553__rxBuf_DIM_1_STRIDE_ 0x04
#define C_CPBA_ARRAY_MS1553__txBuf_              0x11D
#define C_CPBA_TYPE_ARRAY_MS1553__txBuf_         T_uint24
#define C_CPBA_ARRAY_MS1553__txBuf_DIM_1_LENGTH_ 0x20
#define C_CPBA_ARRAY_MS1553__txBuf_DIM_1_STRIDE_ 0x04

// tag type info used by channel frame variables

// defines for type enum MS1553_STATES
// size of a tag type (including padding as defined by sizeof operator)
// value (sizeof) = C_CHAN_TAG_TYPE_SIZE_MS1553_STATES_
#define C_CHAN_TAG_TYPE_SIZE_MS1553_STATES_      0x01
// values of the literals of an enum type
// value = C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_AWAIT_MESSAGE_
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_AWAIT_MESSAGE_ 0x00
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_TBD_TO_RT_AWAITING_DATA_ 0x01
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_DATA_ 0x02
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_STATUS_ 0x03
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_STATUS_ 0x04
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_DATA_ 0x05
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_STATUS_A_ 0x06
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_DATA_ 0x07
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_STATUS_B_ 0x08
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_STATUS_ 0x09
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_DATA_ 0x0A
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_RBD_AWAITING_DATA_ 0x0B
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_DATA_ 0x0C
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_STATUS_ 0x0D
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_X_AWAITING_STATUS_ 0x0E
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_AWAIT_IDLE_ 0x0F
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_IDLE_A_ 0x10
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_BC_TO_RT_AWAITING_IDLE_B_ 0x11
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_IDLE_A_ 0x12
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_BC_AWAITING_IDLE_B_ 0x13
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_IDLE_A_ 0x14
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_IDLE_B_ 0x15
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_RT_TO_RT_AWAITING_IDLE_C_ 0x16
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_IDLE_A_ 0x17
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_XD_AWAITING_IDLE_B_ 0x18
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_RBD_AWAITING_IDLE_ 0x19
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_IDLE_A_ 0x1A
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_RD_AWAITING_IDLE_B_ 0x1B
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_XB_AWAITING_IDLE_ 0x1C
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_X_AWAITING_IDLE_A_ 0x1D
#define C_CHAN_ENUM_LITERAL_MS1553_MS1553_STATES_MS1553_STATE_MC_X_AWAITING_IDLE_B_ 0x1E
// defines for type enum TX_TYPE
#define C_CHAN_TAG_TYPE_SIZE_TX_TYPE_            0x01
#define C_CHAN_ENUM_LITERAL_MS1553_TX_TYPE_TT_CMD_STATUS_ 0x00
#define C_CHAN_ENUM_LITERAL_MS1553_TX_TYPE_TT_DATA_ 0x01
// defines for type enum TX_RT_STATE
#define C_CHAN_TAG_TYPE_SIZE_TX_RT_STATE_        0x01
#define C_CHAN_ENUM_LITERAL_MS1553_TX_RT_STATE_TRS_STATUS_ 0x01
#define C_CHAN_ENUM_LITERAL_MS1553_TX_RT_STATE_TRS_STATUS_DATA_ 0x02
#define C_CHAN_ENUM_LITERAL_MS1553_TX_RT_STATE_TRS_STATUS_MODE_ 0x04
// defines for type enum TX_BC_STATE
#define C_CHAN_TAG_TYPE_SIZE_TX_BC_STATE_        0x01
#define C_CHAN_ENUM_LITERAL_MS1553_TX_BC_STATE_TBS_CMD_ 0x01
#define C_CHAN_ENUM_LITERAL_MS1553_TX_BC_STATE_TBS_CMD_DATA_ 0x02
#define C_CHAN_ENUM_LITERAL_MS1553_TX_BC_STATE_TBS_CMD_CMD_ 0x04

// Channel Variable type information
// Can be used in conjunction with other auto-define information to simplify interfaces
#define C_CPBA_TYPE_MS1553__firstBitDelineator_  T_sint24
#define C_CPBA_TYPE_MS1553__0P50_bits_           T_sint24
#define C_CPBA_TYPE_MS1553__txBuffer_            T_uint24
#define C_CPBA_TYPE_MS1553__txBitCount_          T_sint24
#define C_CPBA_TYPE_MS1553__terminalAddress_     T_sint24
#define C_CPBA_TYPE_MS1553__1P25_bits_           T_sint24
#define C_CPBA_TYPE_MS1553__1P50_bits_           T_sint24
#define C_CPBA_TYPE_MS1553__1P75_bits_           T_sint24
#define C_CPBA_TYPE_MS1553__2P25_bits_           T_sint24
#define C_CPBA_TYPE_MS1553__2P50_bits_           T_sint24
#define C_CPBA_TYPE_MS1553__18P75_bits_          T_sint24
#define C_CPBA_TYPE_MS1553__rxBaseChan_          T_uint8
#define C_CPBA_TYPE_MS1553__txBaseChan_          T_uint8
#define C_CPBA_TYPE_MS1553__LastEdgeOnA_         T_sint24
#define C_CPBA_TYPE_MS1553__LastEdgeOnB_         T_sint24
#define C_CPBA_TYPE_MS1553__synchState_          T_sint24
#define C_CPBA_TYPE_MS1553__isLastEdgeAValid_    T_sint24
#define C_CPBA_TYPE_MS1553__isLastEdgeBValid_    T_sint24
#define C_CPBA_TYPE_MS1553__rxBuffer_            T_sint24
#define C_CPBA_TYPE_MS1553__rxBitCount_          T_sint24
#define C_CPBA_TYPE_MS1553__rxParityCheck_       T_sint24
#define C_CPBA_TYPE_MS1553__parityError_         T_uint8
#define C_CPBA_TYPE_MS1553__missingBitError_     T_uint8
#define C_CPBA_TYPE_MS1553__rxBuf_               T_array
#define C_CPBA_TYPE_MS1553__rxBufPtr_            T_ptr
#define C_CPBA_TYPE_PTR_MS1553__rxBufPtr_        T_uint24
#define C_CPBA_TYPE_MS1553__state_               T_sint8
#define C_CPBA_TYPE_MS1553__validMessage_        T_uint8
#define C_CPBA_TYPE_MS1553__isBroadcastMsg_      T_bool
#define C_CPBA_TYPE_MS1553__isRtRtTransmitter_   T_bool
#define C_CPBA_TYPE_MS1553__cmdWordBuffer_       T_uint24
#define C_CPBA_TYPE_MS1553__rxDataWordCnt_       T_sint24
#define C_CPBA_TYPE_MS1553__initIdleTimeout_     T_sint24
#define C_CPBA_TYPE_MS1553__rtStatusTimeout_     T_sint24
#define C_CPBA_TYPE_MS1553__seekIdleTimeout_     T_sint24
#define C_CPBA_TYPE_MS1553__messageType_         T_uint8
#define C_CPBA_TYPE_MS1553__messageStatus_       T_uint8
#define C_CPBA_TYPE_MS1553__messageStatusInterruptMask_ T_uint8
#define C_CPBA_TYPE_MS1553__cmdWord1_            T_uint24
#define C_CPBA_TYPE_MS1553__cmdWord2_            T_uint24
#define C_CPBA_TYPE_MS1553__rxModeWord_          T_uint24
#define C_CPBA_TYPE_MS1553__rxStatusWord1_       T_uint24
#define C_CPBA_TYPE_MS1553__rxStatusWord2_       T_uint24
#define C_CPBA_TYPE_MS1553__dataWordCnt_         T_uint24
#define C_CPBA_TYPE_MS1553__errorStatus_         T_uint8
#define C_CPBA_TYPE_MS1553__transmitWord_        T_uint24
#define C_CPBA_TYPE_MS1553__transmitNextWord_    T_uint24
#define C_CPBA_TYPE_MS1553__txNextWordPtr_       T_ptr
#define C_CPBA_TYPE_PTR_MS1553__txNextWordPtr_   T_uint24
#define C_CPBA_TYPE_MS1553__txParityCheck_       T_sint8
#define C_CPBA_TYPE_MS1553__synchType_           T_sint8
#define C_CPBA_TYPE_MS1553__txEndTimestamp_      T_uint24
#define C_CPBA_TYPE_MS1553__txType_              T_sint8
#define C_CPBA_TYPE_MS1553__txDelay_             T_uint24
#define C_CPBA_TYPE_MS1553__txInhibit_           T_uint8
#define C_CPBA_TYPE_MS1553__txDataWordInhibit_   T_uint8
#define C_CPBA_TYPE_MS1553__txModeWord_          T_uint24
#define C_CPBA_TYPE_MS1553__txStatusWord_        T_uint24
#define C_CPBA_TYPE_MS1553__txWordCnt_           T_sint24
#define C_CPBA_TYPE_MS1553__txBuf_               T_array
#define C_CPBA_TYPE_MS1553__txBufPtr_            T_ptr
#define C_CPBA_TYPE_PTR_MS1553__txBufPtr_        T_uint24
#define C_CPBA_TYPE_MS1553__bcMessageInProgress_ T_bool
#define C_CPBA_TYPE_MS1553__bcTxType_            T_sint8

// Channel Frame Size, amount of RAM required for each channel
// CXCR.CPBA (this) = CXCR.CPBA (last) + C_FRAME_SIZE_MS1553_;
#define C_FRAME_SIZE_MS1553_                     0x1A0

#endif // __etpu_c_set_defines_H
